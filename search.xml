<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTML标签大全]]></title>
    <url>%2F2017%2F09%2F25%2FhtmlMeta%2F</url>
    <content type="text"><![CDATA[前文刚写完doctype，现在来学习关于meta，再写html的时候，最长用到的就是，但是meta不止这一个属性，下面来好好的了解了解meta meta的作用meta常用于定义页面的说明，关键字，最后修改日期，和其它的元数据。这些元数据将服务于浏览器（如何布局或重载页面），搜索引擎和其它网络服务。语法：1&lt;meta name="参数" content="具体的参数值"&gt; 可选的属性 属性 值 描述 html4 html5 charset character encoding 定义文档的字符编码。 × √ content some_text 定义与 http-equiv 或 name 属性相关的元信息。 √ √ http-equiv content-typeexpiresrefreshset-cookie 把 content 属性关联到 HTTP 头部。 √ √ http-equiv authordescriptionkeywordsgeneratorrevisedothers 把 content 属性关联到一个名称。 √ √ scheme some_text 定义用于翻译 content 属性值的格式。 √ × http-equiv属性http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容 content-Type说明：用于设定网页字符集，便于浏览器解析与渲染页面12&lt;meta http-equiv="content-Type" content="text/html;charset=utf-8"&gt; //不推荐使用&lt;meta charset="utf-8"&gt; //HTML5设定网页字符集的方式，推荐使用UTF-8 expires网页到期时间说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。1&lt;meta http-equiv="expires" content="Sunday 26 October 2016 01:00 GMT" /&gt; refresh自动刷新并指向某页面说明:网页将在设定的时间内，自动刷新并调向设定的网址。1&lt;meta http-equiv="refresh" content="2；URL=http://www.baidu.com/"&gt; //2秒后跳转百度 Set-Cookie(cookie设定)说明:如果网页过期。那么这个网页存在本地的cookies也会被自动删除。12&lt;meta http-equiv="Set-Cookie" content="name, date"&gt; //格式&lt;meta http-equiv="Set-Cookie" content="User=liuguangkuo; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT"&gt; //具体范例 name属性author(作者)说明:用于标注网页作者1&lt;meta name="author" content="liuguangkuo"&gt; description(网站内容的描述)说明:用于标注网页作者1&lt;meta name="description" content="这是刘广阔的个人博客"&gt; keywords(关键字)说明:用于标注网页作者1&lt;meta name="keywords" content="刘广阔，博客，前端"&gt; generator(网页制作软件)说明:用于标注网页作者1&lt;meta name="generator" content="atom"&gt; revised(网页文档的修改时间)说明:用于标注网页作者1&lt;meta name="revised" content="刘广阔的博客, 2017/10/10"/&gt;]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>meta</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[认识HTML的DOCTYPE]]></title>
    <url>%2F2017%2F09%2F18%2FhtmlDoctype%2F</url>
    <content type="text"><![CDATA[一直想回顾回顾以前的基础知识，刚好最近参加了腾讯imweb课堂的学习，从零开始再次学习，开始整理一系列学习笔记。前端工程师的三个必会技能html、css、javascript,咱先从html开始。 什么是DOCTYPE?在学习HTML文档初，第一段代码往往是&lt;!DOCTYPE html&gt;，那么什么是&lt;!DOCTYPE html&gt;，它又有意义是什么呢？&lt;!DOCTYPE&gt;不是HTML标签。它为浏览器提供一项信息（声明），即HTML是用什么版本编写的。&lt;!DOCTYPE&gt;声明必须位于HTML5文档中的第一行，也就是位于&lt;html&gt;标签之前。HTML有多个不同的版本，该标签告知浏览器文档所使用哪种HTML规范，从而正确的显示网页。 HTML版本HTML也有多个不同的版本，只有完全明白页面中使用的确切HTML版本，浏览器才能完全正确地显示出HTML页面。现在常用的版本为HTML5，声明就是&lt;!DOCTYPE html&gt;，没个版本又不同的声明，下面是HTML版本的列表: 版本 年份 HTML 1991 HTML2.0 1995 HTML3.2 1997 HTML4.01 1999 XHTML1.0 2000 HTML5 2012 XHTML5 2013 常见的 DOCTYPE 声明HTML51&lt;!DOCTYPE html&gt; HTML 4.01 Strict这个 DTD 包含所有 HTML 元素和属性，但不包括表象或过时的元素（如 font ）。框架集是不允许的。1&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt; HTML 4.01 Transitional这个 DTD 包含所有 HTML 元素和属性，包括表象或过时的元素（如 font ）。框架集是不允许的。1&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt; HTML 4.01 Frameset这个 DTD 与 HTML 4.01 Transitional 相同，但是允许使用框架集内容。1&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"&gt; XHTML 1.0 Strict该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。12&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt; XHTML 1.0 Transitional该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。12&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; XHTML 1.0 Frameset该 DTD 等同于 XHTML 1.0 Transitional，但允许框架集内容。12&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt; XHTML 1.1该 DTD 等同于 XHTML 1.0 Strict，但允许添加模型（例如提供对东亚语系的 ruby 支持）。1&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt; 关于HTML 有效DOCTYPES，点击查看]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>doctype</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js replace方法替换变量]]></title>
    <url>%2F2017%2F07%2F25%2Fjs-replace%2F</url>
    <content type="text"><![CDATA[使用editor编辑器，添加图的时候使用的是相对路径，但是客户端直接把这块呈现在页面里，导致图片打不开，从而考虑在编辑文本的时候在原来文本的url前添加域名，但是replace无法直接替换变量，看了些资料后找到了解决方法，如下： 12345//替换第一个astring.replace('a','b')//替换全部astring.replace(/a/g,'b')&#125;) 但是我的后台分测试服务器及线上服务器，所有需要替换的值是一个变量:12var host = 'www.a.com'string.replace(host,'b') 这样写，可以替换第一个，到那时无法替换全部，然后改成：12var host = 'www.a.com'string.replace(/host/g,'b') 这样写，无法替换，解决方法为：12var host = 'www.a.com'string.replace(new RegExp(host,'g'),'b')]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>replace</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node-express生成Excel文件]]></title>
    <url>%2F2017%2F07%2F21%2Fexpress-excel%2F</url>
    <content type="text"><![CDATA[自从公司开通了商城后，时常要查看每天的销售情况，又因为货都是供应商发送，需要提供每天的订单信息给到供应商，所有需要发每天的数据生产一个excel文件。 使用的是excel-export模块，下面介绍使用方法。1npm install excel-export 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849var nodeExcel = require('excel-export');router.get('/downloadExcel',function(req,res)&#123; var tabelHead = [&#123; caption:'用户id' &#125;,&#123; caption:'购买渠道' &#125;,&#123; caption:'商品id' &#125;,&#123; caption:'商品名称' &#125;,&#123; caption:'收货人' &#125;,&#123; caption:'手机号码' &#125;,&#123; caption:'地址' &#125;,&#123; caption:'备注' &#125;,&#123; caption:'快递单号' &#125;,&#123; caption:'资料填写时间' &#125;,&#123; caption:'订单时间' &#125;,&#123; caption:'价格' &#125; ]; request.post(&#123;url:'地址', form: &#123;&#125;&#125;, function(err,httpResponse,body)&#123; var arrBox = []; var result = JSON.parse(body); for(var i = 0;i &lt; result.data.length;i++)&#123; var arr = []; for(j in result.data[i])&#123; var val = result.data[i][j] arr.push(val) &#125; arrBox.push(arr) &#125; var configuration = &#123;&#125;; configuration.cols= tabelHead; //标题 configuration.rows = arrBox; //内容 var result=nodeExcel.execute(configuration); res.setHeader('Content-Type','application/vnd.openxmlformates'); res.setHeader("Content-Disposition","attachment;filename="+"file_name.xlsx"); res.end(result,'binary'); &#125;)&#125;); 效果如下：]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ueditor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bootstrap datetimepicker浏览器卡死]]></title>
    <url>%2F2017%2F07%2F19%2Fbootstrap-datetimepicker%2F</url>
    <content type="text"><![CDATA[最近在做后台系统文章管理的时候遇到了个小问题，后台采用bootstrap搭建，然后里面有个需求需要用到时间控件，所有使用了datetimepicker，然后出现了多个选择框的时候，浏览器卡死的问题，具体如下： 文章列表页面需要给单个文章修改上架时间的功能，在页面初始化加载的时候，运行了：1234567$('.demo').datetimepicker(&#123; format: 'yyyy-mm-dd hh:ii:ss', language: 'zh-CN', todayHighlight : true, autoclose : true, todayBtn: true&#125;) 第一个问题：当翻页的时候，新加载的input没有得到渲染，所有选择没有效果。 解决方法：要在ajax的success重新渲染列表后重新再一次的初始化input。 第二个问题：当多翻页几次之后，浏览器竟然卡死了，起初还以为电脑问题，后来排查发现就这个多次初始化input问题。我的列表页，一页有20条数据，一次创建20个时间选择器，最后导致页面卡死。 解决方法：在重新渲染之前删除多余的选择器12345678$('.datetimepicker').remove();$('.demo').datetimepicker(&#123; format: 'yyyy-mm-dd hh:ii:ss', language: 'zh-CN', todayHighlight : true, autoclose : true, todayBtn: true&#125;) 页面如下：]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
        <tag>datetimepicker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ueditor自定义弹出框]]></title>
    <url>%2F2017%2F07%2F13%2Ffit-editor%2F</url>
    <content type="text"><![CDATA[最近公司产品上线了商城模块，为了方便推广，需要在文章里添加一个商品的信息，点击跳转都对应的商品详情页面，文章的编辑器使用的是百度的ueditor，看了下文档，可以使用自定义弹出框来实现这个效果。 第一步找到ueditor.config.js文件中的toolbars的数组，增加一个mydialog,然后找到labelMap对象，添加&#39;mydialog&#39;:&#39;测试&#39;,如果不需要全局也可以对单独文件添加 12345678var ue = UE.getEditor('container',&#123; toolbars: [ ['source', 'undo', 'redo', 'bold','link','unlink','simpleupload','insertimage','fontsize','paragraph','forecolor','mydialog'] ], labelMap : &#123; 'mydialog' : '测试' &#125;&#125;); 第二步找到dialogs文件，新建mydialog文件夹，然后在文件夹里新建mydialog.html文件，这个文件自定义页面的代码，任何编辑修改都在这里，如参考ling/link.html文件。 第三步找到ueditor.all.js文件，搜索btnCmds,在数组里添加mydialog。1234567var btnCmds = ['undo', 'redo', 'formatmatch', 'bold', 'italic', 'underline', 'fontborder', 'touppercase', 'tolowercase', 'strikethrough', 'subscript', 'superscript', 'source', 'indent', 'outdent', 'blockquote', 'pasteplain', 'pagebreak', 'selectall', 'print','horizontal', 'removeformat', 'time', 'date', 'unlink', 'insertparagraphbeforetable', 'insertrow', 'insertcol', 'mergeright', 'mergedown', 'deleterow', 'deletecol', 'splittorows', 'splittocols', 'splittocells', 'mergecells', 'deletetable', 'drafts','mydialog']; 搜索iframeUrlMap,把第二步中的的文件路径加进去。12345var iframeUrlMap = &#123; //... 'charts': '~/dialogs/charts/charts.html', 'mydialog': '~/dialogs/mydialog/mydialog.html'&#125;; 搜索dialogBtns,在ok属性中添加mydialog。12345var dialogBtns = &#123; noOk:['searchreplace', 'help', 'spechars', 'webapp','preview'], ok:['attachment', 'anchor', 'link', 'insertimage', 'map', 'gmap', 'insertframe', 'wordimage', 'insertvideo', 'insertframe', 'edittip', 'edittable', 'edittd', 'scrawl', 'template', 'music', 'background', 'charts','mydialog'] &#125;; 修改自己icon图标，找到themes/default/images/icons.png文件，添加自己的图片到文件中，然后使用背景定位来选中自己的图片.找到themes/default/css/ueditor.css,添加代码:123.edui-default .edui-for-mydialog .edui-icon &#123; background-position: -123px -76px&#125; 这个时候点击自己添加好的图片就能有效果了，具体逻辑在mydialog.html中编写，如图：点击确定使用 dialog.onok方法123dialog.onok = function ()&#123; //确定后运行的代码&#125;; 这个时候以为已经好了，但是当使用editor.execCommand(&#39;insertHtml&#39;,&#39;内容&#39;);到编辑器的时候发现div等一些标签被ueditor被过滤掉了。解决方法如下： 一1234me.setOpt(&#123; 'allowDivTransToP':false,//true改成false 'disabledTableInTable':true&#125;); 二找到me.addInputRule方法，注销case style、script12345678910case &apos;style&apos;:case &apos;script&apos;: node.setAttr(&#123; cdata_tag: node.tagName, cdata_data: (node.innerHTML() || &apos;&apos;), &apos;_ue_custom_node_&apos;:&apos;true&apos; &#125;); node.tagName = &apos;div&apos;; node.innerHTML(&apos;&apos;); break; 三找到me.addOutputRule方法，注销switch12345678910111213141516171819202122232425262728293031switch (node.tagName) &#123; case &apos;div&apos;: if (val = node.getAttr(&apos;cdata_tag&apos;)) &#123; node.tagName = val; node.appendChild(UE.uNode.createText(node.getAttr(&apos;cdata_data&apos;))); node.setAttr(&#123;cdata_tag: &apos;&apos;, cdata_data: &apos;&apos;,&apos;_ue_custom_node_&apos;:&apos;&apos;&#125;); &#125; break; case &apos;a&apos;: if (val = node.getAttr(&apos;_href&apos;)) &#123; node.setAttr(&#123; &apos;href&apos;: utils.html(val), &apos;_href&apos;: &apos;&apos; &#125;) &#125; break; break; case &apos;span&apos;: val = node.getAttr(&apos;id&apos;); if(val &amp;&amp; /^_baidu_bookmark_/i.test(val))&#123; node.parentNode.removeChild(node) &#125; break; case &apos;img&apos;: if (val = node.getAttr(&apos;_src&apos;)) &#123; node.setAttr(&#123; &apos;src&apos;: node.getAttr(&apos;_src&apos;), &apos;_src&apos;: &apos;&apos; &#125;) &#125;&#125; 最后因为最后文章是在app里呈现，这样的话就需要适配各种手机，这个时候在插入html的时候不能把样式写入到html，但是又要保证在后台能看到设计的效果，就这个2套样式，一套是app的样式，一套是在ueditor自己的样式，目录在themes/iframe.css，需要为了保持在后台显示的效果和前台一样。后台如图：app效果： 其他问题记录修改字体颜色找到ueditor.all.js文件，搜索COLORS,把原有颜色修改成自己需要的颜色。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ueditor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[整理常用正则表达式]]></title>
    <url>%2F2017%2F07%2F05%2Fregexp%2F</url>
    <content type="text"><![CDATA[校验数字的表达式12345678910111213141516171819数字：^[0-9]*$n位的数字：^\d&#123;n&#125;$至少n位的数字：^\d&#123;n,&#125;$m-n位的数字：^\d&#123;m,n&#125;$零和非零开头的数字：^(0|[1-9][0-9]*)$非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$非零的负整数：^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$非负整数：^\d+$ 或 ^[1-9]\d*|0$非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$ 校验字符的表达式1234567891011汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$长度为3-20的所有字符：^.&#123;3,20&#125;$由26个英文字母组成的字符串：^[A-Za-z]+$由26个大写英文字母组成的字符串：^[A-Z]+$由26个小写英文字母组成的字符串：^[a-z]+$由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$可以输入含有^%&amp;',;=?$\"等字符：[^%&amp;',;=?$\x22]+禁止输入含有~的字符：[^~\x22]+ 特殊需求表达式123456789101112131415161718192021222324Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$中文字符的正则表达式：[\u4e00-\u9fa5]双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))空白行的正则表达式：\n\s*\r (可以用来删除空白行)HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)) 本文来源于网上，未找到出处！]]></content>
      <categories>
        <category>正则</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一张图了解sass]]></title>
    <url>%2F2017%2F07%2F04%2FsassMap%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
        <tag>scss</tag>
        <tag>css</tag>
      </tags>
  </entry>
</search>