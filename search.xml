<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[css3帧动画-animation]]></title>
    <url>%2F2018%2F03%2F30%2Fanimation%2F</url>
    <content type="text"><![CDATA[一、什么是帧动画？前面提到补间动画，只能定制动画的两个状态，也就是开始和介绍状态。但是帧动画就能控制到每一帧的动画，从而做出更为复杂的动画。 二、animation的属性123456animation-nameanimation-durationanimation-timing-functionanimation-delayanimation-iteration-countanimation-direction animation-name属性animation-name规定需要绑定到选择器的 keyframe 名称。123.box &#123; animation-name: keyframe | none;&#125; 12keyframe 规定需要绑定到选择器的 keyframe 的名称。none 规定无动画效果（可用于覆盖来自级联的动画）。 animation-duration属性animation-duration规定完成动画所花费的时间，以秒或毫秒计。123.box &#123; animation-duration: time;&#125; 1time 规定完成动画所花费的时间。默认值是 0，意味着没有动画效果。 animation-timing-function属性animation-timing-function规定速度效果的速度曲线。1animation-timing-function: linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(n,n,n,n); 123456linear 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。ease 规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。ease-in 规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。ease-out 规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。ease-in-out 规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。 更多cubic-bezier自定义，查看http://cubic-bezier.com/ animation-delay属性animation-delay定义过渡效果何时开始。123.box &#123; animation-delay: time;&#125; 1time 可选。定义动画开始前等待的时间，以秒或毫秒计。默认值是 0。 animation-iteration-count属性animation-iteration-count规定动画应该播放的次数。123.box &#123; animation-iteration-count: n|infinite;&#125; 12n 定义动画播放次数的数值。infinite 规定动画应该无限次播放。 animation-direction属性animation-direction规定是否应该轮流反向播放动画。123.box &#123; animation-direction: normal | alternate;&#125; 12normal 默认值。动画应该正常播放。alternate 动画应该轮流反向播放。 animation 属性transition属性是animation-name, animation-duration , animation-timing-function, animation-delay, animation-iteration-count 和 animation-direction的简写，默认值为none 0 ease 0 1 normal。123.box &#123; animation: name duration timing-function delay iteration-count direction;&#125;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>动画</tag>
        <tag>animation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3补间动画-transition]]></title>
    <url>%2F2018%2F03%2F30%2Ftransition%2F</url>
    <content type="text"><![CDATA[一、什么是补间动画？补间动画，顾名思义，就是补齐中间状态的一种动画。补间动画我们可以控制两个状态，就是开始状态和介绍状态，中间的状态是由浏览器自动帮忙计算填补。 二、transition的属性1234transition-propertytransition-durationtransition-timing-functiontransition-delay transition-property属性transition-property规定设置过渡效果的 CSS 属性的名称。123.box &#123; transition-property: all ｜ none | property;&#125; 123all 默认值，所有属性都将获得过渡效果。none 没有属性会获得过渡效果。property 定义应用过渡效果的 CSS 属性名称列表，列表以逗号分隔。 不是所有的css属性都支持transition动画，不支持的属性如下：123456background-images //a.jpg -&gt; b.jpgfloat //none -&gt; leftwidth/height //auto -&gt; 100px(不支持)，10px -&gt; 100px(支持)display //none -&gt;blockvisibility //hidden -&gt; visibleposition // static -&gt; absolute transition-duration属性transition-duration规定完成过渡效果需要多少秒或毫秒。123.box &#123; transition-duration: time;&#125; 1time 规定完成过渡效果需要花费的时间（以秒或毫秒计）,默认值是 0，意味着不会有效果。 transition-timing-function属性transition-timing-function规定速度效果的速度曲线。1transition-timing-function: linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(n,n,n,n); 123456linear 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。ease 规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。ease-in 规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。ease-out 规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。ease-in-out 规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。 更多cubic-bezier自定义，查看http://cubic-bezier.com/ transition-delay属性transition-delay定义过渡效果何时开始。123.box &#123; transition-delay: time;&#125; 1time 规定在过渡效果开始之前需要等待的时间，以秒或毫秒计。,默认值是 0 transition 属性transition属性是transition-property, transition-duration , transition-timing-function 和 transition-delay的简写，默认值为all 0 ease 0。123.box &#123; transition: property duration timing-function delay;&#125;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>动画</tag>
        <tag>transition</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3布局－flex]]></title>
    <url>%2F2018%2F03%2F30%2Fflex%2F</url>
    <content type="text"><![CDATA[以下内容主要来源于：阮一峰的网络日志 浏览器支持 Chrome Safari Firefox Opera IE Android iOS 21+ 6.1+ 22+ 12.1+ 10+ 4.4+ 7.1+ PC端不建议使用，毕竟ie7-ie9还有差不多15%的市场份额，更多兼容查看：Can I use 一、什么是flex布局？Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。可以使用Flexbox实时代码演示帮助学习，但是该网站链接了google的cdn文件，要梯子、要梯子、要梯子。 123.box&#123; display: flex;&#125; 行内元素也可以使用 Flex 布局。123.box&#123; display: inline-flex;&#125; 注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 二、基本概念采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。 容器默认存在两根轴：水平的主轴main axis和垂直的交叉轴cross axis。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 三、容器的属性以下6个属性设置在容器上。123456flex-direction //属性决定主轴的方向（即项目的排列方向）flex-wrapflex-flowjustify-contentalign-itemsalign-content flex-direction属性flex-direction属性决定主轴的方向（即项目的排列方向）。123.box &#123; flex-direction: row | row-reverse | column | column-reverse;&#125; 1234row（默认值）：主轴为水平方向，起点在左端。row-reverse：主轴为水平方向，起点在右端。column：主轴为垂直方向，起点在上沿。column-reverse：主轴为垂直方向，起点在下沿。 flex-wrap属性默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。 123.box&#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; 它可能取三个值。（1）nowrap（默认）：不换行。 （2）wrap：换行，第一行在上方。 （3）wrap-reverse：换行，第一行在下方。 flex-flowflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。123.box &#123; flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125; justify-content属性justify-content属性定义了项目在主轴上的对齐方式。123.box &#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125; 它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。12345flex-start（默认值）：左对齐flex-end：右对齐center： 居中space-between：两端对齐，项目之间的间隔都相等。space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 align-items属性align-items属性定义项目在交叉轴上如何对齐。123.box &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125; 它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。12345flex-start：交叉轴的起点对齐。flex-end：交叉轴的终点对齐。center：交叉轴的中点对齐。baseline: 项目的第一行文字的基线对齐。stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 align-content属性align-content属性定义了多根轴线的对齐方式。flex-wrap属性为nowrap，该属性不起作用。123.box &#123; align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125; 该属性可能取6个值。123456flex-start：与交叉轴的起点对齐。flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。 四、flex-item的属性以下6个属性设置在项目上。123456orderflex-growflex-shrinkflex-basisflexalign-self order属性order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。123.item &#123; order: &lt;integer&gt;;&#125; flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。123.item &#123; flex-grow: &lt;number&gt;;&#125; 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，以上图为例，3个容器，把剩余空间分成4等份，flex-grow属性为2的容器占据2等份。 flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。123.item &#123; flex-shrink: &lt;number&gt;; /* default 1 */&#125; 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小，其他等比缩小。 flex-basis属性flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。123.item &#123; flex-basis: &lt;length&gt; | auto;&#125; 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 flex属性flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。123.item &#123; flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]&#125; 该属性有两个快捷值：auto (1 1 auto) 和 none(0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 align-self属性align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。123.item &#123; align-self: auto | flex-start | flex-end | center | baseline | stretch;&#125; 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css3</tag>
        <tag>布局</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML meta标签大全]]></title>
    <url>%2F2017%2F09%2F25%2FhtmlMeta%2F</url>
    <content type="text"><![CDATA[前文刚写完doctype，现在来学习关于meta，再写html的时候，最长用到的就是，但是meta不止这一个属性，下面来好好的了解了解meta meta的作用meta常用于定义页面的说明，关键字，最后修改日期，和其它的元数据。这些元数据将服务于浏览器（如何布局或重载页面），搜索引擎和其它网络服务。语法：1&lt;meta name="参数" content="具体的参数值"&gt; 可选的属性 属性 值 描述 html4 html5 charset character encoding 定义文档的字符编码。 × √ content some_text 定义与 http-equiv 或 name 属性相关的元信息。 √ √ http-equiv content-typeexpiresrefreshset-cookie 把 content 属性关联到 HTTP 头部。 √ √ name authordescriptionkeywordsgeneratorrevisedothers 把 content 属性关联到一个名称。 √ √ scheme some_text 定义用于翻译 content 属性值的格式。 √ × http-equiv属性http-equiv顾名思义，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容 content-Type说明：用于设定网页字符集，便于浏览器解析与渲染页面12&lt;meta http-equiv="content-Type" content="text/html;charset=utf-8"&gt; //不推荐使用&lt;meta charset="utf-8"&gt; //HTML5设定网页字符集的方式，推荐使用UTF-8 expires网页到期时间说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。1&lt;meta http-equiv="expires" content="Sunday 26 October 2016 01:00 GMT" /&gt; refresh自动刷新并指向某页面说明:网页将在设定的时间内，自动刷新并调向设定的网址。1&lt;meta http-equiv="refresh" content="2；URL=http://www.baidu.com/"&gt; //2秒后跳转百度 Set-Cookie说明:如果网页过期。那么这个网页存在本地的cookies也会被自动删除。12&lt;meta http-equiv="Set-Cookie" content="name, date"&gt; //格式&lt;meta http-equiv="Set-Cookie" content="User=liuguangkuo; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT"&gt; //具体范例 name属性author说明:用于标注网页作者1&lt;meta name="author" content="liuguangkuo"&gt; description说明:页面描述，用于搜索引擎收录1&lt;meta name="description" content="这是刘广阔的个人博客"&gt; keywords说明:页面关键词，用于被搜索引擎收录1&lt;meta name="keywords" content="刘广阔，博客，前端"&gt; generator说明:用于标注网页制作软件1&lt;meta name="generator" content="atom"&gt; revised说明:网页文档的修改时间1&lt;meta name="revised" content="刘广阔的博客, 2017/10/10"/&gt; 移动端metaviewport说明:能优化移动浏览器的显示。如果不是响应式网站，不要使用initial-scale或者禁用缩放。12&lt;meta name ="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui"&gt; viewport content参数解释：width viewport 宽度(数值/device-width)height viewport 高度(数值/device-height)initial-scale 初始缩放比例(范围从&gt;0到10)maximum-scale 最大缩放比例minimum-scale 最小缩放比例user-scalable 是否允许用户缩放(yes/no)minimal-ui iOS 7.1 beta 2 中新增属性，可以在页面加载时最小化上下状态栏。这是一个布尔值，可以直写minimal-ui ios设备说明:添加到主屏后的标题1&lt;meta name="apple-mobile-web-app-title" content="刘广阔的博客"&gt; 说明:是否启用 WebApp 全屏模式（需添加到主屏后有效，浏览器打开无效）1&lt;meta name="apple-mobile-web-app-capable" content="yes" /&gt; 说明:添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）1&lt;meta name="apple-itunes-app" content="app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"&gt; 说明:设置苹果工具栏颜色1&lt;meta name="apple-mobile-web-app-status-bar-style" content="black"/&gt; 只有在 apple-mobile-web-app-capable&quot; content=&quot;yes&quot; 时生效content 参数：default 默认值。black 状态栏背景是黑色。black-translucent 状态栏背景是黑色半透明。如果设置为 default 或 black ,网页内容从状态栏底部开始。如果设置为 black-translucent ,网页内容充满整个屏幕，顶部会被状态栏遮挡。 说明:忽略页面中的数字识别为电话，忽略email识别1&lt;meta name="format-detection" content="telphone=no, email=no"/&gt;]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>meta</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[认识HTML的DOCTYPE]]></title>
    <url>%2F2017%2F09%2F18%2FhtmlDoctype%2F</url>
    <content type="text"><![CDATA[一直想回顾回顾以前的基础知识，刚好最近参加了腾讯imweb课堂的学习，从零开始再次学习，开始整理一系列学习笔记。前端工程师的三个必会技能html、css、javascript,咱先从html开始。 什么是DOCTYPE?在学习HTML文档初，第一段代码往往是&lt;!DOCTYPE html&gt;，那么什么是&lt;!DOCTYPE html&gt;，它又有意义是什么呢？&lt;!DOCTYPE&gt;不是HTML标签。它为浏览器提供一项信息（声明），即HTML是用什么版本编写的。&lt;!DOCTYPE&gt;声明必须位于HTML5文档中的第一行，也就是位于&lt;html&gt;标签之前。HTML有多个不同的版本，该标签告知浏览器文档所使用哪种HTML规范，从而正确的显示网页。 HTML版本HTML也有多个不同的版本，只有完全明白页面中使用的确切HTML版本，浏览器才能完全正确地显示出HTML页面。现在常用的版本为HTML5，声明就是&lt;!DOCTYPE html&gt;，没个版本又不同的声明，下面是HTML版本的列表: 版本 年份 HTML 1991 HTML2.0 1995 HTML3.2 1997 HTML4.01 1999 XHTML1.0 2000 HTML5 2012 XHTML5 2013 常见的 DOCTYPE 声明HTML51&lt;!DOCTYPE html&gt; HTML 4.01 Strict这个 DTD 包含所有 HTML 元素和属性，但不包括表象或过时的元素（如 font ）。框架集是不允许的。1&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt; HTML 4.01 Transitional这个 DTD 包含所有 HTML 元素和属性，包括表象或过时的元素（如 font ）。框架集是不允许的。1&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt; HTML 4.01 Frameset这个 DTD 与 HTML 4.01 Transitional 相同，但是允许使用框架集内容。1&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"&gt; XHTML 1.0 Strict该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。12&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt; XHTML 1.0 Transitional该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。12&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; XHTML 1.0 Frameset该 DTD 等同于 XHTML 1.0 Transitional，但允许框架集内容。12&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt; XHTML 1.1该 DTD 等同于 XHTML 1.0 Strict，但允许添加模型（例如提供对东亚语系的 ruby 支持）。1&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt; 关于HTML 有效DOCTYPES，点击查看]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>doctype</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js replace方法替换变量]]></title>
    <url>%2F2017%2F07%2F25%2Fjs-replace%2F</url>
    <content type="text"><![CDATA[使用editor编辑器，添加图的时候使用的是相对路径，但是客户端直接把这块呈现在页面里，导致图片打不开，从而考虑在编辑文本的时候在原来文本的url前添加域名，但是replace无法直接替换变量，看了些资料后找到了解决方法，如下： 12345//替换第一个astring.replace('a','b')//替换全部astring.replace(/a/g,'b')&#125;) 但是我的后台分测试服务器及线上服务器，所有需要替换的值是一个变量:12var host = 'www.a.com'string.replace(host,'b') 这样写，可以替换第一个，到那时无法替换全部，然后改成：12var host = 'www.a.com'string.replace(/host/g,'b') 这样写，无法替换，解决方法为：12var host = 'www.a.com'string.replace(new RegExp(host,'g'),'b')]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>replace</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node-express生成Excel文件]]></title>
    <url>%2F2017%2F07%2F21%2Fexpress-excel%2F</url>
    <content type="text"><![CDATA[自从公司开通了商城后，时常要查看每天的销售情况，又因为货都是供应商发送，需要提供每天的订单信息给到供应商，所有需要发每天的数据生产一个excel文件。 使用的是excel-export模块，下面介绍使用方法。1npm install excel-export 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849var nodeExcel = require('excel-export');router.get('/downloadExcel',function(req,res)&#123; var tabelHead = [&#123; caption:'用户id' &#125;,&#123; caption:'购买渠道' &#125;,&#123; caption:'商品id' &#125;,&#123; caption:'商品名称' &#125;,&#123; caption:'收货人' &#125;,&#123; caption:'手机号码' &#125;,&#123; caption:'地址' &#125;,&#123; caption:'备注' &#125;,&#123; caption:'快递单号' &#125;,&#123; caption:'资料填写时间' &#125;,&#123; caption:'订单时间' &#125;,&#123; caption:'价格' &#125; ]; request.post(&#123;url:'地址', form: &#123;&#125;&#125;, function(err,httpResponse,body)&#123; var arrBox = []; var result = JSON.parse(body); for(var i = 0;i &lt; result.data.length;i++)&#123; var arr = []; for(j in result.data[i])&#123; var val = result.data[i][j] arr.push(val) &#125; arrBox.push(arr) &#125; var configuration = &#123;&#125;; configuration.cols= tabelHead; //标题 configuration.rows = arrBox; //内容 var result=nodeExcel.execute(configuration); res.setHeader('Content-Type','application/vnd.openxmlformates'); res.setHeader("Content-Disposition","attachment;filename="+"file_name.xlsx"); res.end(result,'binary'); &#125;)&#125;); 效果如下：]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ueditor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bootstrap datetimepicker浏览器卡死]]></title>
    <url>%2F2017%2F07%2F19%2Fbootstrap-datetimepicker%2F</url>
    <content type="text"><![CDATA[最近在做后台系统文章管理的时候遇到了个小问题，后台采用bootstrap搭建，然后里面有个需求需要用到时间控件，所有使用了datetimepicker，然后出现了多个选择框的时候，浏览器卡死的问题，具体如下： 文章列表页面需要给单个文章修改上架时间的功能，在页面初始化加载的时候，运行了：1234567$('.demo').datetimepicker(&#123; format: 'yyyy-mm-dd hh:ii:ss', language: 'zh-CN', todayHighlight : true, autoclose : true, todayBtn: true&#125;) 第一个问题：当翻页的时候，新加载的input没有得到渲染，所有选择没有效果。 解决方法：要在ajax的success重新渲染列表后重新再一次的初始化input。 第二个问题：当多翻页几次之后，浏览器竟然卡死了，起初还以为电脑问题，后来排查发现就这个多次初始化input问题。我的列表页，一页有20条数据，一次创建20个时间选择器，最后导致页面卡死。 解决方法：在重新渲染之前删除多余的选择器12345678$('.datetimepicker').remove();$('.demo').datetimepicker(&#123; format: 'yyyy-mm-dd hh:ii:ss', language: 'zh-CN', todayHighlight : true, autoclose : true, todayBtn: true&#125;) 页面如下：]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
        <tag>datetimepicker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ueditor自定义弹出框]]></title>
    <url>%2F2017%2F07%2F13%2Ffit-editor%2F</url>
    <content type="text"><![CDATA[最近公司产品上线了商城模块，为了方便推广，需要在文章里添加一个商品的信息，点击跳转都对应的商品详情页面，文章的编辑器使用的是百度的ueditor，看了下文档，可以使用自定义弹出框来实现这个效果。 第一步找到ueditor.config.js文件中的toolbars的数组，增加一个mydialog,然后找到labelMap对象，添加&#39;mydialog&#39;:&#39;测试&#39;,如果不需要全局也可以对单独文件添加 12345678var ue = UE.getEditor('container',&#123; toolbars: [ ['source', 'undo', 'redo', 'bold','link','unlink','simpleupload','insertimage','fontsize','paragraph','forecolor','mydialog'] ], labelMap : &#123; 'mydialog' : '测试' &#125;&#125;); 第二步找到dialogs文件，新建mydialog文件夹，然后在文件夹里新建mydialog.html文件，这个文件自定义页面的代码，任何编辑修改都在这里，如参考ling/link.html文件。 第三步找到ueditor.all.js文件，搜索btnCmds,在数组里添加mydialog。1234567var btnCmds = ['undo', 'redo', 'formatmatch', 'bold', 'italic', 'underline', 'fontborder', 'touppercase', 'tolowercase', 'strikethrough', 'subscript', 'superscript', 'source', 'indent', 'outdent', 'blockquote', 'pasteplain', 'pagebreak', 'selectall', 'print','horizontal', 'removeformat', 'time', 'date', 'unlink', 'insertparagraphbeforetable', 'insertrow', 'insertcol', 'mergeright', 'mergedown', 'deleterow', 'deletecol', 'splittorows', 'splittocols', 'splittocells', 'mergecells', 'deletetable', 'drafts','mydialog']; 搜索iframeUrlMap,把第二步中的的文件路径加进去。12345var iframeUrlMap = &#123; //... 'charts': '~/dialogs/charts/charts.html', 'mydialog': '~/dialogs/mydialog/mydialog.html'&#125;; 搜索dialogBtns,在ok属性中添加mydialog。12345var dialogBtns = &#123; noOk:['searchreplace', 'help', 'spechars', 'webapp','preview'], ok:['attachment', 'anchor', 'link', 'insertimage', 'map', 'gmap', 'insertframe', 'wordimage', 'insertvideo', 'insertframe', 'edittip', 'edittable', 'edittd', 'scrawl', 'template', 'music', 'background', 'charts','mydialog'] &#125;; 修改自己icon图标，找到themes/default/images/icons.png文件，添加自己的图片到文件中，然后使用背景定位来选中自己的图片.找到themes/default/css/ueditor.css,添加代码:123.edui-default .edui-for-mydialog .edui-icon &#123; background-position: -123px -76px&#125; 这个时候点击自己添加好的图片就能有效果了，具体逻辑在mydialog.html中编写，如图：点击确定使用 dialog.onok方法123dialog.onok = function ()&#123; //确定后运行的代码&#125;; 这个时候以为已经好了，但是当使用editor.execCommand(&#39;insertHtml&#39;,&#39;内容&#39;);到编辑器的时候发现div等一些标签被ueditor被过滤掉了。解决方法如下： 一1234me.setOpt(&#123; 'allowDivTransToP':false,//true改成false 'disabledTableInTable':true&#125;); 二找到me.addInputRule方法，注销case style、script12345678910case &apos;style&apos;:case &apos;script&apos;: node.setAttr(&#123; cdata_tag: node.tagName, cdata_data: (node.innerHTML() || &apos;&apos;), &apos;_ue_custom_node_&apos;:&apos;true&apos; &#125;); node.tagName = &apos;div&apos;; node.innerHTML(&apos;&apos;); break; 三找到me.addOutputRule方法，注销switch12345678910111213141516171819202122232425262728293031switch (node.tagName) &#123; case &apos;div&apos;: if (val = node.getAttr(&apos;cdata_tag&apos;)) &#123; node.tagName = val; node.appendChild(UE.uNode.createText(node.getAttr(&apos;cdata_data&apos;))); node.setAttr(&#123;cdata_tag: &apos;&apos;, cdata_data: &apos;&apos;,&apos;_ue_custom_node_&apos;:&apos;&apos;&#125;); &#125; break; case &apos;a&apos;: if (val = node.getAttr(&apos;_href&apos;)) &#123; node.setAttr(&#123; &apos;href&apos;: utils.html(val), &apos;_href&apos;: &apos;&apos; &#125;) &#125; break; break; case &apos;span&apos;: val = node.getAttr(&apos;id&apos;); if(val &amp;&amp; /^_baidu_bookmark_/i.test(val))&#123; node.parentNode.removeChild(node) &#125; break; case &apos;img&apos;: if (val = node.getAttr(&apos;_src&apos;)) &#123; node.setAttr(&#123; &apos;src&apos;: node.getAttr(&apos;_src&apos;), &apos;_src&apos;: &apos;&apos; &#125;) &#125;&#125; 最后因为最后文章是在app里呈现，这样的话就需要适配各种手机，这个时候在插入html的时候不能把样式写入到html，但是又要保证在后台能看到设计的效果，就这个2套样式，一套是app的样式，一套是在ueditor自己的样式，目录在themes/iframe.css，需要为了保持在后台显示的效果和前台一样。后台如图：app效果： 其他问题记录修改字体颜色找到ueditor.all.js文件，搜索COLORS,把原有颜色修改成自己需要的颜色。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ueditor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[整理常用正则表达式]]></title>
    <url>%2F2017%2F07%2F05%2Fregexp%2F</url>
    <content type="text"><![CDATA[校验数字的表达式12345678910111213141516171819数字：^[0-9]*$n位的数字：^\d&#123;n&#125;$至少n位的数字：^\d&#123;n,&#125;$m-n位的数字：^\d&#123;m,n&#125;$零和非零开头的数字：^(0|[1-9][0-9]*)$非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$非零的负整数：^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$非负整数：^\d+$ 或 ^[1-9]\d*|0$非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$ 校验字符的表达式1234567891011汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$长度为3-20的所有字符：^.&#123;3,20&#125;$由26个英文字母组成的字符串：^[A-Za-z]+$由26个大写英文字母组成的字符串：^[A-Z]+$由26个小写英文字母组成的字符串：^[a-z]+$由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$可以输入含有^%&amp;',;=?$\"等字符：[^%&amp;',;=?$\x22]+禁止输入含有~的字符：[^~\x22]+ 特殊需求表达式123456789101112131415161718192021222324Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$中文字符的正则表达式：[\u4e00-\u9fa5]双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))空白行的正则表达式：\n\s*\r (可以用来删除空白行)HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)) 本文来源于网上，未找到出处！]]></content>
      <categories>
        <category>正则</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一张图了解sass]]></title>
    <url>%2F2017%2F07%2F04%2FsassMap%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>sass</category>
      </categories>
      <tags>
        <tag>sass</tag>
        <tag>scss</tag>
        <tag>css</tag>
      </tags>
  </entry>
</search>